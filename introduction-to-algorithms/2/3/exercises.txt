2.3-1
Illustrated on a paper

2.3-2
T(n) = 2, if n = 2
       2T(n/2) + n, if n = 2^k, k > 1
prove by math induction that T(n) = n lg n

0. prove that it holds for n = 2 => 2 lg 2 = 2 * 1 = 2
1. induction step

suppose that:
2f(k/2) + k = k lg(k) is OK
let's prove for 2*k:
2f(k) + 2k = 2k lg(2k)
             2k (1 + lg(k))
             2k + 2k lg(k)
2f(k) = 2k lg(k)
f(k) = k lg(k)
f(k) = 2f(k/2) + k  - and that's our original equation

2.3-4
f(n) = f(n-1) + n  => 1 + 2 + ... n

2.3-5
def binarySearch(a, el)
    left = 0
    right = a.length

    while(right > left)
       mid = (left + right)/2
       if a[mid] == el
           return mid

       if el > a[mid]
           left = mid + 1
       else
           right = mid

2.3-6
Yes and no. We can search faster though we still need to move the elements the same. So the worst-case running tun will not change

2.3-7
The algorithm can be following:
1) sort the S -> Ssorted (O(n log n))
2) take the first element S1. To form a sum sum we should have Sanother = x - S1. Seach for x - S1 through binary search => O(n log n)
As result we have the speach O(n log (n))


