2.1-3
def linear-search(A, v)
res = NIL
for i = 1 to A.length
    if(v == A[i])
        res = i
        return res
return res

loop invariant - on each step the result is either NIL (if it's not found) or the index

1) initialization
Before loop iteration we haven't searched yet so logically res is NIL
2) maintenance
On each iteration step we preserve NIL or immediately return with the index if the result is found
3) termination
The loop reaches termination only in case no corresponding value was found, res preserves NIL in that case

2.1-4
INPUT:
A - array of length n that represents an integer number, each element is an integer that represents bit (0, 1)
B - another in array that represents an integer number
OUTPUT:
C - array of length n + 1, that represents sum of A and B

def add-ints(A,B)
    n = A.length
    C = array(n+1)
    prev = 0
    for i = n down 0
       bit_sum = A[i] + B[i] + prev
       if(bit_sum == 0)
            C[i] = 0
       if(bit_sum == 1)
            C[i] = 1
            prev = 0
       if(bit_sum == 2)
            C[i] = 0
            prev = 1
       if(bit_sum == 3)
            C[i] = 1
            prev = 1
     C[n + 1] = prev

2.2-1
Θ(n^3)

2.2-2
def selection-sort(A)
    n = A.length
    for i = 1 to n-1
        min = i
        for j = i+1 to n
            if A[j] < min  min = j
        temp = A[i]
        A[i] = A[min]
        A[min] = temp

loop invariant - A[1...i] is sorted
it needs to run till n-1 because on the prev. iteration it will be already sorted
worst case is equal average case and = Θ(n^2).
That's because even if the array is sorted we still iterate in the inner loop till its end.