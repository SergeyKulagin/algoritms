5.1-1
Let's say we have a set of candidates R. Since according to the algorithm for each pair of candidates a, b we can
define relation R which is the best and it means the A is a total relation that have total order.
5.1-2
The implementation could call RANDOM(0,1) b-a times and add the results to a
The running time is f(b-a)
todo: others

5.2-1
Since number of permutations of the candidates is n! (uniform random permutations) for to chose only 1 it
should go first we have 1 permutation for that. So probability is 1/n!
Similarly for choosing n candidates. The should be sorted from lowest rank to highest and there is only
1 permutation for that. So probability is 1/n! also.

5.2-2
Since the first candidate is automatically hired, we need to find all permutation
when we have a second candidate "better" then the first, and nobody better then him going after him.
To find how many let's consider an example.
We have 5 ranked candidates (1,2,3,4,5)
If we put the best first - no one is better, so we have
5 -> 0, other cases
4 -> subsets(1..3), 5
3 -> subsets(1..2), 5
2 -> subsets(1), 5
1 -> 5

For that we can find a formula for i ranked candidate ...see ipad notes